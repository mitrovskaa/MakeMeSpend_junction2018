//
//  StyleKit.swift
//  MakeMeSpend
//
//  Created by BAH on Nov 24, 2018.
//  Copyright Â© 2018 BAH. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class StyleKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Symbols
    
    class func drawBarsStatusBlack4(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 20)
        
        /// Pin Right
        do {
            context.saveGState()
            context.translateBy(x: 309, y: 3)
            
            /// Battery
            let battery = UIBezierPath()
            battery.move(to: CGPoint(x: 1.49, y: 0))
            battery.addLine(to: CGPoint(x: 21.01, y: 0))
            battery.addCurve(to: CGPoint(x: 22.5, y: 1.51), controlPoint1: CGPoint(x: 21.83, y: 0), controlPoint2: CGPoint(x: 22.5, y: 0.67))
            battery.addLine(to: CGPoint(x: 22.5, y: 7.99))
            battery.addCurve(to: CGPoint(x: 21.01, y: 9.5), controlPoint1: CGPoint(x: 22.5, y: 8.83), controlPoint2: CGPoint(x: 21.83, y: 9.5))
            battery.addLine(to: CGPoint(x: 1.49, y: 9.5))
            battery.addCurve(to: CGPoint(x: 0, y: 7.99), controlPoint1: CGPoint(x: 0.67, y: 9.5), controlPoint2: CGPoint(x: 0, y: 8.83))
            battery.addLine(to: CGPoint(x: 0, y: 1.51))
            battery.addCurve(to: CGPoint(x: 1.49, y: 0), controlPoint1: CGPoint(x: 0, y: 0.67), controlPoint2: CGPoint(x: 0.67, y: 0))
            battery.close()
            battery.move(to: CGPoint(x: 23, y: 3))
            battery.addLine(to: CGPoint(x: 23.75, y: 3))
            battery.addCurve(to: CGPoint(x: 24.5, y: 3.74), controlPoint1: CGPoint(x: 24.17, y: 3), controlPoint2: CGPoint(x: 24.5, y: 3.33))
            battery.addLine(to: CGPoint(x: 24.5, y: 5.76))
            battery.addCurve(to: CGPoint(x: 23.75, y: 6.5), controlPoint1: CGPoint(x: 24.5, y: 6.16), controlPoint2: CGPoint(x: 24.16, y: 6.5))
            battery.addLine(to: CGPoint(x: 23, y: 6.5))
            battery.addLine(to: CGPoint(x: 23, y: 3))
            battery.close()
            battery.move(to: CGPoint(x: 1.51, y: 0.5))
            battery.addCurve(to: CGPoint(x: 0.5, y: 1.51), controlPoint1: CGPoint(x: 0.95, y: 0.5), controlPoint2: CGPoint(x: 0.5, y: 0.96))
            battery.addLine(to: CGPoint(x: 0.5, y: 7.99))
            battery.addCurve(to: CGPoint(x: 1.51, y: 9), controlPoint1: CGPoint(x: 0.5, y: 8.55), controlPoint2: CGPoint(x: 0.95, y: 9))
            battery.addLine(to: CGPoint(x: 20.99, y: 9))
            battery.addCurve(to: CGPoint(x: 22, y: 7.99), controlPoint1: CGPoint(x: 21.55, y: 9), controlPoint2: CGPoint(x: 22, y: 8.54))
            battery.addLine(to: CGPoint(x: 22, y: 1.51))
            battery.addCurve(to: CGPoint(x: 20.99, y: 0.5), controlPoint1: CGPoint(x: 22, y: 0.95), controlPoint2: CGPoint(x: 21.55, y: 0.5))
            battery.addLine(to: CGPoint(x: 1.51, y: 0.5))
            battery.close()
            battery.move(to: CGPoint(x: 1.51, y: 1))
            battery.addLine(to: CGPoint(x: 20.99, y: 1))
            battery.addCurve(to: CGPoint(x: 21.5, y: 1.49), controlPoint1: CGPoint(x: 21.27, y: 1), controlPoint2: CGPoint(x: 21.5, y: 1.22))
            battery.addLine(to: CGPoint(x: 21.5, y: 8.01))
            battery.addCurve(to: CGPoint(x: 20.99, y: 8.5), controlPoint1: CGPoint(x: 21.5, y: 8.28), controlPoint2: CGPoint(x: 21.27, y: 8.5))
            battery.addLine(to: CGPoint(x: 1.51, y: 8.5))
            battery.addCurve(to: CGPoint(x: 1, y: 8.01), controlPoint1: CGPoint(x: 1.23, y: 8.5), controlPoint2: CGPoint(x: 1, y: 8.28))
            battery.addLine(to: CGPoint(x: 1, y: 1.49))
            battery.addCurve(to: CGPoint(x: 1.51, y: 1), controlPoint1: CGPoint(x: 1, y: 1.22), controlPoint2: CGPoint(x: 1.23, y: 1))
            battery.close()
            context.saveGState()
            context.translateBy(x: 36, y: 2.5)
            battery.usesEvenOddFillRule = true
            UIColor(white: 0.012, alpha: 1).setFill()
            battery.fill()
            context.restoreGState()
            
            /// 100%
            let _100 = NSMutableAttributedString(string: "100%")
            _100.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: _100.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                _100.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _100.length))
            }
            _100.addAttribute(.foregroundColor, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: _100.length))
            context.saveGState()
            _100.draw(in: CGRect(x: 0, y: 0.5, width: 33, height: 16))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Time
        let time = NSMutableAttributedString(string: "9:41 AM")
        time.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: time.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        time.addAttribute(.foregroundColor, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: time.length))
        context.saveGState()
        time.draw(at: CGPoint(x: 163, y: 3.5))
        context.restoreGState()
        
        /// Signal
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsStatusBlack3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 20)
        
        /// Pin Right
        do {
            context.saveGState()
            context.translateBy(x: 309, y: 3)
            
            /// Battery
            let battery = UIBezierPath()
            battery.move(to: CGPoint(x: 1.49, y: 0))
            battery.addLine(to: CGPoint(x: 21.01, y: 0))
            battery.addCurve(to: CGPoint(x: 22.5, y: 1.51), controlPoint1: CGPoint(x: 21.83, y: 0), controlPoint2: CGPoint(x: 22.5, y: 0.67))
            battery.addLine(to: CGPoint(x: 22.5, y: 7.99))
            battery.addCurve(to: CGPoint(x: 21.01, y: 9.5), controlPoint1: CGPoint(x: 22.5, y: 8.83), controlPoint2: CGPoint(x: 21.83, y: 9.5))
            battery.addLine(to: CGPoint(x: 1.49, y: 9.5))
            battery.addCurve(to: CGPoint(x: 0, y: 7.99), controlPoint1: CGPoint(x: 0.67, y: 9.5), controlPoint2: CGPoint(x: 0, y: 8.83))
            battery.addLine(to: CGPoint(x: 0, y: 1.51))
            battery.addCurve(to: CGPoint(x: 1.49, y: 0), controlPoint1: CGPoint(x: 0, y: 0.67), controlPoint2: CGPoint(x: 0.67, y: 0))
            battery.close()
            battery.move(to: CGPoint(x: 23, y: 3))
            battery.addLine(to: CGPoint(x: 23.75, y: 3))
            battery.addCurve(to: CGPoint(x: 24.5, y: 3.74), controlPoint1: CGPoint(x: 24.17, y: 3), controlPoint2: CGPoint(x: 24.5, y: 3.33))
            battery.addLine(to: CGPoint(x: 24.5, y: 5.76))
            battery.addCurve(to: CGPoint(x: 23.75, y: 6.5), controlPoint1: CGPoint(x: 24.5, y: 6.16), controlPoint2: CGPoint(x: 24.16, y: 6.5))
            battery.addLine(to: CGPoint(x: 23, y: 6.5))
            battery.addLine(to: CGPoint(x: 23, y: 3))
            battery.close()
            battery.move(to: CGPoint(x: 1.51, y: 0.5))
            battery.addCurve(to: CGPoint(x: 0.5, y: 1.51), controlPoint1: CGPoint(x: 0.95, y: 0.5), controlPoint2: CGPoint(x: 0.5, y: 0.96))
            battery.addLine(to: CGPoint(x: 0.5, y: 7.99))
            battery.addCurve(to: CGPoint(x: 1.51, y: 9), controlPoint1: CGPoint(x: 0.5, y: 8.55), controlPoint2: CGPoint(x: 0.95, y: 9))
            battery.addLine(to: CGPoint(x: 20.99, y: 9))
            battery.addCurve(to: CGPoint(x: 22, y: 7.99), controlPoint1: CGPoint(x: 21.55, y: 9), controlPoint2: CGPoint(x: 22, y: 8.54))
            battery.addLine(to: CGPoint(x: 22, y: 1.51))
            battery.addCurve(to: CGPoint(x: 20.99, y: 0.5), controlPoint1: CGPoint(x: 22, y: 0.95), controlPoint2: CGPoint(x: 21.55, y: 0.5))
            battery.addLine(to: CGPoint(x: 1.51, y: 0.5))
            battery.close()
            battery.move(to: CGPoint(x: 1.51, y: 1))
            battery.addLine(to: CGPoint(x: 20.99, y: 1))
            battery.addCurve(to: CGPoint(x: 21.5, y: 1.49), controlPoint1: CGPoint(x: 21.27, y: 1), controlPoint2: CGPoint(x: 21.5, y: 1.22))
            battery.addLine(to: CGPoint(x: 21.5, y: 8.01))
            battery.addCurve(to: CGPoint(x: 20.99, y: 8.5), controlPoint1: CGPoint(x: 21.5, y: 8.28), controlPoint2: CGPoint(x: 21.27, y: 8.5))
            battery.addLine(to: CGPoint(x: 1.51, y: 8.5))
            battery.addCurve(to: CGPoint(x: 1, y: 8.01), controlPoint1: CGPoint(x: 1.23, y: 8.5), controlPoint2: CGPoint(x: 1, y: 8.28))
            battery.addLine(to: CGPoint(x: 1, y: 1.49))
            battery.addCurve(to: CGPoint(x: 1.51, y: 1), controlPoint1: CGPoint(x: 1, y: 1.22), controlPoint2: CGPoint(x: 1.23, y: 1))
            battery.close()
            context.saveGState()
            context.translateBy(x: 36, y: 2.5)
            battery.usesEvenOddFillRule = true
            UIColor(white: 0.012, alpha: 1).setFill()
            battery.fill()
            context.restoreGState()
            
            /// 100%
            let _100 = NSMutableAttributedString(string: "100%")
            _100.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: _100.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                _100.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _100.length))
            }
            _100.addAttribute(.foregroundColor, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: _100.length))
            context.saveGState()
            _100.draw(in: CGRect(x: 0, y: 0.5, width: 33, height: 16))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Time
        let time = NSMutableAttributedString(string: "9:41 AM")
        time.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: time.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        time.addAttribute(.foregroundColor, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: time.length))
        context.saveGState()
        time.draw(at: CGPoint(x: 163, y: 3.5))
        context.restoreGState()
        
        /// Signal
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsStatusBlack2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 20)
        
        /// Pin Right
        do {
            context.saveGState()
            context.translateBy(x: 309, y: 3)
            
            /// Battery
            let battery = UIBezierPath()
            battery.move(to: CGPoint(x: 1.49, y: 0))
            battery.addLine(to: CGPoint(x: 21.01, y: 0))
            battery.addCurve(to: CGPoint(x: 22.5, y: 1.51), controlPoint1: CGPoint(x: 21.83, y: 0), controlPoint2: CGPoint(x: 22.5, y: 0.67))
            battery.addLine(to: CGPoint(x: 22.5, y: 7.99))
            battery.addCurve(to: CGPoint(x: 21.01, y: 9.5), controlPoint1: CGPoint(x: 22.5, y: 8.83), controlPoint2: CGPoint(x: 21.83, y: 9.5))
            battery.addLine(to: CGPoint(x: 1.49, y: 9.5))
            battery.addCurve(to: CGPoint(x: 0, y: 7.99), controlPoint1: CGPoint(x: 0.67, y: 9.5), controlPoint2: CGPoint(x: 0, y: 8.83))
            battery.addLine(to: CGPoint(x: 0, y: 1.51))
            battery.addCurve(to: CGPoint(x: 1.49, y: 0), controlPoint1: CGPoint(x: 0, y: 0.67), controlPoint2: CGPoint(x: 0.67, y: 0))
            battery.close()
            battery.move(to: CGPoint(x: 23, y: 3))
            battery.addLine(to: CGPoint(x: 23.75, y: 3))
            battery.addCurve(to: CGPoint(x: 24.5, y: 3.74), controlPoint1: CGPoint(x: 24.17, y: 3), controlPoint2: CGPoint(x: 24.5, y: 3.33))
            battery.addLine(to: CGPoint(x: 24.5, y: 5.76))
            battery.addCurve(to: CGPoint(x: 23.75, y: 6.5), controlPoint1: CGPoint(x: 24.5, y: 6.16), controlPoint2: CGPoint(x: 24.16, y: 6.5))
            battery.addLine(to: CGPoint(x: 23, y: 6.5))
            battery.addLine(to: CGPoint(x: 23, y: 3))
            battery.close()
            battery.move(to: CGPoint(x: 1.51, y: 0.5))
            battery.addCurve(to: CGPoint(x: 0.5, y: 1.51), controlPoint1: CGPoint(x: 0.95, y: 0.5), controlPoint2: CGPoint(x: 0.5, y: 0.96))
            battery.addLine(to: CGPoint(x: 0.5, y: 7.99))
            battery.addCurve(to: CGPoint(x: 1.51, y: 9), controlPoint1: CGPoint(x: 0.5, y: 8.55), controlPoint2: CGPoint(x: 0.95, y: 9))
            battery.addLine(to: CGPoint(x: 20.99, y: 9))
            battery.addCurve(to: CGPoint(x: 22, y: 7.99), controlPoint1: CGPoint(x: 21.55, y: 9), controlPoint2: CGPoint(x: 22, y: 8.54))
            battery.addLine(to: CGPoint(x: 22, y: 1.51))
            battery.addCurve(to: CGPoint(x: 20.99, y: 0.5), controlPoint1: CGPoint(x: 22, y: 0.95), controlPoint2: CGPoint(x: 21.55, y: 0.5))
            battery.addLine(to: CGPoint(x: 1.51, y: 0.5))
            battery.close()
            battery.move(to: CGPoint(x: 1.51, y: 1))
            battery.addLine(to: CGPoint(x: 20.99, y: 1))
            battery.addCurve(to: CGPoint(x: 21.5, y: 1.49), controlPoint1: CGPoint(x: 21.27, y: 1), controlPoint2: CGPoint(x: 21.5, y: 1.22))
            battery.addLine(to: CGPoint(x: 21.5, y: 8.01))
            battery.addCurve(to: CGPoint(x: 20.99, y: 8.5), controlPoint1: CGPoint(x: 21.5, y: 8.28), controlPoint2: CGPoint(x: 21.27, y: 8.5))
            battery.addLine(to: CGPoint(x: 1.51, y: 8.5))
            battery.addCurve(to: CGPoint(x: 1, y: 8.01), controlPoint1: CGPoint(x: 1.23, y: 8.5), controlPoint2: CGPoint(x: 1, y: 8.28))
            battery.addLine(to: CGPoint(x: 1, y: 1.49))
            battery.addCurve(to: CGPoint(x: 1.51, y: 1), controlPoint1: CGPoint(x: 1, y: 1.22), controlPoint2: CGPoint(x: 1.23, y: 1))
            battery.close()
            context.saveGState()
            context.translateBy(x: 36, y: 2.5)
            battery.usesEvenOddFillRule = true
            UIColor(white: 0.012, alpha: 1).setFill()
            battery.fill()
            context.restoreGState()
            
            /// 100%
            let _100 = NSMutableAttributedString(string: "100%")
            _100.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: _100.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                _100.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _100.length))
            }
            _100.addAttribute(.foregroundColor, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: _100.length))
            context.saveGState()
            _100.draw(in: CGRect(x: 0, y: 0.5, width: 33, height: 16))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Time
        let time = NSMutableAttributedString(string: "9:41 AM")
        time.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: time.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        time.addAttribute(.foregroundColor, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: time.length))
        context.saveGState()
        time.draw(at: CGPoint(x: 163, y: 3.5))
        context.restoreGState()
        
        /// Signal
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawBarsStatusBlack(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 20)
        
        /// Pin Right
        do {
            context.saveGState()
            context.translateBy(x: 309, y: 3)
            
            /// Battery
            let battery = UIBezierPath()
            battery.move(to: CGPoint(x: 1.49, y: 0))
            battery.addLine(to: CGPoint(x: 21.01, y: 0))
            battery.addCurve(to: CGPoint(x: 22.5, y: 1.51), controlPoint1: CGPoint(x: 21.83, y: 0), controlPoint2: CGPoint(x: 22.5, y: 0.67))
            battery.addLine(to: CGPoint(x: 22.5, y: 7.99))
            battery.addCurve(to: CGPoint(x: 21.01, y: 9.5), controlPoint1: CGPoint(x: 22.5, y: 8.83), controlPoint2: CGPoint(x: 21.83, y: 9.5))
            battery.addLine(to: CGPoint(x: 1.49, y: 9.5))
            battery.addCurve(to: CGPoint(x: 0, y: 7.99), controlPoint1: CGPoint(x: 0.67, y: 9.5), controlPoint2: CGPoint(x: 0, y: 8.83))
            battery.addLine(to: CGPoint(x: 0, y: 1.51))
            battery.addCurve(to: CGPoint(x: 1.49, y: 0), controlPoint1: CGPoint(x: 0, y: 0.67), controlPoint2: CGPoint(x: 0.67, y: 0))
            battery.close()
            battery.move(to: CGPoint(x: 23, y: 3))
            battery.addLine(to: CGPoint(x: 23.75, y: 3))
            battery.addCurve(to: CGPoint(x: 24.5, y: 3.74), controlPoint1: CGPoint(x: 24.17, y: 3), controlPoint2: CGPoint(x: 24.5, y: 3.33))
            battery.addLine(to: CGPoint(x: 24.5, y: 5.76))
            battery.addCurve(to: CGPoint(x: 23.75, y: 6.5), controlPoint1: CGPoint(x: 24.5, y: 6.16), controlPoint2: CGPoint(x: 24.16, y: 6.5))
            battery.addLine(to: CGPoint(x: 23, y: 6.5))
            battery.addLine(to: CGPoint(x: 23, y: 3))
            battery.close()
            battery.move(to: CGPoint(x: 1.51, y: 0.5))
            battery.addCurve(to: CGPoint(x: 0.5, y: 1.51), controlPoint1: CGPoint(x: 0.95, y: 0.5), controlPoint2: CGPoint(x: 0.5, y: 0.96))
            battery.addLine(to: CGPoint(x: 0.5, y: 7.99))
            battery.addCurve(to: CGPoint(x: 1.51, y: 9), controlPoint1: CGPoint(x: 0.5, y: 8.55), controlPoint2: CGPoint(x: 0.95, y: 9))
            battery.addLine(to: CGPoint(x: 20.99, y: 9))
            battery.addCurve(to: CGPoint(x: 22, y: 7.99), controlPoint1: CGPoint(x: 21.55, y: 9), controlPoint2: CGPoint(x: 22, y: 8.54))
            battery.addLine(to: CGPoint(x: 22, y: 1.51))
            battery.addCurve(to: CGPoint(x: 20.99, y: 0.5), controlPoint1: CGPoint(x: 22, y: 0.95), controlPoint2: CGPoint(x: 21.55, y: 0.5))
            battery.addLine(to: CGPoint(x: 1.51, y: 0.5))
            battery.close()
            battery.move(to: CGPoint(x: 1.51, y: 1))
            battery.addLine(to: CGPoint(x: 20.99, y: 1))
            battery.addCurve(to: CGPoint(x: 21.5, y: 1.49), controlPoint1: CGPoint(x: 21.27, y: 1), controlPoint2: CGPoint(x: 21.5, y: 1.22))
            battery.addLine(to: CGPoint(x: 21.5, y: 8.01))
            battery.addCurve(to: CGPoint(x: 20.99, y: 8.5), controlPoint1: CGPoint(x: 21.5, y: 8.28), controlPoint2: CGPoint(x: 21.27, y: 8.5))
            battery.addLine(to: CGPoint(x: 1.51, y: 8.5))
            battery.addCurve(to: CGPoint(x: 1, y: 8.01), controlPoint1: CGPoint(x: 1.23, y: 8.5), controlPoint2: CGPoint(x: 1, y: 8.28))
            battery.addLine(to: CGPoint(x: 1, y: 1.49))
            battery.addCurve(to: CGPoint(x: 1.51, y: 1), controlPoint1: CGPoint(x: 1, y: 1.22), controlPoint2: CGPoint(x: 1.23, y: 1))
            battery.close()
            context.saveGState()
            context.translateBy(x: 36, y: 2.5)
            battery.usesEvenOddFillRule = true
            UIColor(white: 0.012, alpha: 1).setFill()
            battery.fill()
            context.restoreGState()
            
            /// 100%
            let _100 = NSMutableAttributedString(string: "100%")
            _100.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: _100.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .right
                _100.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _100.length))
            }
            _100.addAttribute(.foregroundColor, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: _100.length))
            context.saveGState()
            _100.draw(in: CGRect(x: 0, y: 0.5, width: 33, height: 16))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Time
        let time = NSMutableAttributedString(string: "9:41 AM")
        time.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: time.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            time.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: time.length))
        }
        time.addAttribute(.foregroundColor, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: time.length))
        context.saveGState()
        time.draw(at: CGPoint(x: 163, y: 3.5))
        context.restoreGState()
        
        /// Signal
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawOverridesStatusBarSignalBlack(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 140, height: 20), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 140, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 140, y: resizedFrame.height / 20)
        
        /// Wi-Fi
        let wiFi = UIBezierPath()
        wiFi.move(to: CGPoint(x: 8.64, y: 6.94))
        wiFi.addLine(to: CGPoint(x: 6.52, y: 9))
        wiFi.addLine(to: CGPoint(x: 4.36, y: 6.91))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 5.97), controlPoint1: CGPoint(x: 4.88, y: 6.33), controlPoint2: CGPoint(x: 5.64, y: 5.97))
        wiFi.addCurve(to: CGPoint(x: 8.64, y: 6.94), controlPoint1: CGPoint(x: 7.35, y: 5.97), controlPoint2: CGPoint(x: 8.13, y: 6.35))
        wiFi.close()
        wiFi.move(to: CGPoint(x: 10.82, y: 4.82))
        wiFi.addLine(to: CGPoint(x: 9.73, y: 5.88))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 4.48), controlPoint1: CGPoint(x: 8.94, y: 5.02), controlPoint2: CGPoint(x: 7.78, y: 4.48))
        wiFi.addCurve(to: CGPoint(x: 3.27, y: 5.85), controlPoint1: CGPoint(x: 5.21, y: 4.48), controlPoint2: CGPoint(x: 4.07, y: 5.01))
        wiFi.addLine(to: CGPoint(x: 2.18, y: 4.79))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 2.98), controlPoint1: CGPoint(x: 3.26, y: 3.68), controlPoint2: CGPoint(x: 4.79, y: 2.98))
        wiFi.addCurve(to: CGPoint(x: 10.82, y: 4.82), controlPoint1: CGPoint(x: 8.2, y: 2.98), controlPoint2: CGPoint(x: 9.74, y: 3.69))
        wiFi.close()
        wiFi.move(to: CGPoint(x: 13, y: 2.71))
        wiFi.addLine(to: CGPoint(x: 11.91, y: 3.76))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 1.49), controlPoint1: CGPoint(x: 10.55, y: 2.37), controlPoint2: CGPoint(x: 8.63, y: 1.49))
        wiFi.addCurve(to: CGPoint(x: 1.09, y: 3.74), controlPoint1: CGPoint(x: 4.36, y: 1.49), controlPoint2: CGPoint(x: 2.45, y: 2.35))
        wiFi.addLine(to: CGPoint(x: 0, y: 2.68))
        wiFi.addCurve(to: CGPoint(x: 6.49, y: 0), controlPoint1: CGPoint(x: 1.64, y: 1.03), controlPoint2: CGPoint(x: 3.94, y: 0))
        wiFi.addCurve(to: CGPoint(x: 13, y: 2.71), controlPoint1: CGPoint(x: 9.05, y: 0), controlPoint2: CGPoint(x: 11.36, y: 1.04))
        wiFi.close()
        context.saveGState()
        context.translateBy(x: 87.5, y: 5.5)
        wiFi.usesEvenOddFillRule = true
        UIColor(white: 0.012, alpha: 1).setFill()
        wiFi.fill()
        context.restoreGState()
        
        /// Carrier
        let carrier = NSMutableAttributedString(string: "Sketch")
        carrier.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: carrier.length))
        carrier.addAttribute(.foregroundColor, value: UIColor(white: 0.012, alpha: 1), range: NSRange(location: 0, length: carrier.length))
        context.saveGState()
        carrier.draw(at: CGPoint(x: 44, y: 3.5))
        context.restoreGState()
        
        /// Mobile Signal
        let mobileSignal = UIBezierPath()
        mobileSignal.move(to: CGPoint(x: 2.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 0, y: 2.75), controlPoint1: CGPoint(x: 1.23, y: 5.5), controlPoint2: CGPoint(x: 0, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 2.75, y: 0), controlPoint1: CGPoint(x: 0, y: 1.23), controlPoint2: CGPoint(x: 1.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 5.5, y: 2.75), controlPoint1: CGPoint(x: 4.27, y: 0), controlPoint2: CGPoint(x: 5.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 2.75, y: 5.5), controlPoint1: CGPoint(x: 5.5, y: 4.27), controlPoint2: CGPoint(x: 4.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 9.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 7, y: 2.75), controlPoint1: CGPoint(x: 8.23, y: 5.5), controlPoint2: CGPoint(x: 7, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 9.75, y: 0), controlPoint1: CGPoint(x: 7, y: 1.23), controlPoint2: CGPoint(x: 8.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 12.5, y: 2.75), controlPoint1: CGPoint(x: 11.27, y: 0), controlPoint2: CGPoint(x: 12.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 9.75, y: 5.5), controlPoint1: CGPoint(x: 12.5, y: 4.27), controlPoint2: CGPoint(x: 11.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 16.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 14, y: 2.75), controlPoint1: CGPoint(x: 15.23, y: 5.5), controlPoint2: CGPoint(x: 14, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 16.75, y: 0), controlPoint1: CGPoint(x: 14, y: 1.23), controlPoint2: CGPoint(x: 15.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 19.5, y: 2.75), controlPoint1: CGPoint(x: 18.27, y: 0), controlPoint2: CGPoint(x: 19.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 16.75, y: 5.5), controlPoint1: CGPoint(x: 19.5, y: 4.27), controlPoint2: CGPoint(x: 18.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 23.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 21, y: 2.75), controlPoint1: CGPoint(x: 22.23, y: 5.5), controlPoint2: CGPoint(x: 21, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 23.75, y: 0), controlPoint1: CGPoint(x: 21, y: 1.23), controlPoint2: CGPoint(x: 22.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 26.5, y: 2.75), controlPoint1: CGPoint(x: 25.27, y: 0), controlPoint2: CGPoint(x: 26.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 23.75, y: 5.5), controlPoint1: CGPoint(x: 26.5, y: 4.27), controlPoint2: CGPoint(x: 25.27, y: 5.5))
        mobileSignal.close()
        mobileSignal.move(to: CGPoint(x: 30.75, y: 5.5))
        mobileSignal.addCurve(to: CGPoint(x: 28, y: 2.75), controlPoint1: CGPoint(x: 29.23, y: 5.5), controlPoint2: CGPoint(x: 28, y: 4.27))
        mobileSignal.addCurve(to: CGPoint(x: 30.75, y: 0), controlPoint1: CGPoint(x: 28, y: 1.23), controlPoint2: CGPoint(x: 29.23, y: 0))
        mobileSignal.addCurve(to: CGPoint(x: 33.5, y: 2.75), controlPoint1: CGPoint(x: 32.27, y: 0), controlPoint2: CGPoint(x: 33.5, y: 1.23))
        mobileSignal.addCurve(to: CGPoint(x: 30.75, y: 5.5), controlPoint1: CGPoint(x: 33.5, y: 4.27), controlPoint2: CGPoint(x: 32.27, y: 5.5))
        mobileSignal.close()
        context.saveGState()
        context.translateBy(x: 6.5, y: 7.5)
        mobileSignal.usesEvenOddFillRule = true
        UIColor(white: 0.012, alpha: 1).setFill()
        mobileSignal.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    /// Page 1
    
    class func drawSixthScreen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 736), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 736), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 736)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 45, y: 91)
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 28, y: 106)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// Congrats! You just r
                    let congratsYouJustR = NSMutableAttributedString(string: "Congrats! \nYou just reached Level 2.\n\nCelebrate with a 10â¬ voucher for \nyour next purchase.\n")
                    congratsYouJustR.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: congratsYouJustR.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        congratsYouJustR.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: congratsYouJustR.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    congratsYouJustR.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Rectangle
            let rectangle = UIBezierPath()
            rectangle.move(to: CGPoint(x: 2, y: 0))
            rectangle.addLine(to: CGPoint(x: 323, y: 0))
            rectangle.addCurve(to: CGPoint(x: 325, y: 2), controlPoint1: CGPoint(x: 324.1, y: 0), controlPoint2: CGPoint(x: 325, y: 0.9))
            rectangle.addLine(to: CGPoint(x: 325, y: 8))
            rectangle.addCurve(to: CGPoint(x: 323, y: 10), controlPoint1: CGPoint(x: 325, y: 9.1), controlPoint2: CGPoint(x: 324.1, y: 10))
            rectangle.addLine(to: CGPoint(x: 2, y: 10))
            rectangle.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0.9, y: 10), controlPoint2: CGPoint(x: 0, y: 9.1))
            rectangle.addLine(to: CGPoint(x: 0, y: 2))
            rectangle.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
            rectangle.close()
            context.saveGState()
            context.translateBy(x: 0, y: 430)
            rectangle.usesEvenOddFillRule = true
            UIColor(white: 0.847, alpha: 1).setFill()
            rectangle.fill()
            context.saveGState()
            rectangle.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.592, alpha: 1).setStroke()
            rectangle.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 78, y: 398)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// Reviews needed for L
                    let reviewsNeededForL = NSMutableAttributedString(string: "Reviews needed for Level 3: 15\n")
                    reviewsNeededForL.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: 30))
                    reviewsNeededForL.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 30, length: 1))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        reviewsNeededForL.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: reviewsNeededForL.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    reviewsNeededForL.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// large@2x-3
            // Warning: Image layers are not supported.
            
            /// Rectangle
            let rectangle2 = UIBezierPath()
            rectangle2.move(to: CGPoint.zero)
            rectangle2.addLine(to: CGPoint(x: 134, y: 0))
            rectangle2.addLine(to: CGPoint(x: 134, y: 35))
            rectangle2.addLine(to: CGPoint(x: 0, y: 35))
            rectangle2.addLine(to: CGPoint.zero)
            rectangle2.close()
            context.saveGState()
            context.translateBy(x: 94, y: 294)
            rectangle2.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            rectangle2.fill()
            context.saveGState()
            rectangle2.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle2.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setStroke()
            rectangle2.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Claim voucher
            let claimVoucher = NSMutableAttributedString(string: "Claim voucher")
            claimVoucher.addAttribute(.font, value: UIFont(name: "Avenir-Light", size: 18)!, range: NSRange(location: 0, length: claimVoucher.length))
            claimVoucher.addAttribute(.kern, value: 0.6, range: NSRange(location: 0, length: claimVoucher.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                claimVoucher.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: claimVoucher.length))
            }
            claimVoucher.addAttribute(.foregroundColor, value: UIColor(hue: 0.532, saturation: 0.028, brightness: 0.97, alpha: 1), range: NSRange(location: 0, length: claimVoucher.length))
            context.saveGState()
            claimVoucher.draw(at: CGPoint(x: 101, y: 298))
            context.restoreGState()
            
            /// MP_RGB_NoTM_Logo+Type Horisontal Blue
            // Warning: Image layers are not supported.
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 150, y: 440)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// 0/15
                    let _015 = NSMutableAttributedString(string: "0/15")
                    _015.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: _015.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        _015.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _015.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    _015.draw(at: CGPoint(x: 0.5, y: 0))
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Bars/Navigation/Navigation Bar
        // Warning: New symbols are not supported.
        
        /// Rectangle
        let rectangle3 = UIBezierPath()
        rectangle3.move(to: CGPoint.zero)
        rectangle3.addLine(to: CGPoint(x: 72, y: 0))
        rectangle3.addLine(to: CGPoint(x: 72, y: 29))
        rectangle3.addLine(to: CGPoint(x: 0, y: 29))
        rectangle3.addLine(to: CGPoint.zero)
        rectangle3.close()
        context.saveGState()
        context.translateBy(x: 0, y: 26)
        rectangle3.usesEvenOddFillRule = true
        UIColor(white: 0.976, alpha: 1).setFill()
        rectangle3.fill()
        context.saveGState()
        rectangle3.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle3.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.976, alpha: 1).setStroke()
        rectangle3.stroke()
        context.restoreGState()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawFifthScreen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 1002), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 1002), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 1002)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 48, y: 87)
            
            /// MP_RGB_NoTM_Logo+Type Horisontal Blue
            // Warning: Image layers are not supported.
            
            /// Star
            let star = UIBezierPath()
            star.move(to: CGPoint(x: 19.02, y: 29.25))
            star.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star.addLine(to: CGPoint(x: 0, y: 13.47))
            star.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star.addLine(to: CGPoint(x: 19.02, y: 0))
            star.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star.close()
            context.saveGState()
            context.translateBy(x: 47, y: 87)
            star.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            star.fill()
            star.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star.stroke()
            context.restoreGState()
            
            /// Star
            let star2 = UIBezierPath()
            star2.move(to: CGPoint(x: 19.02, y: 29.25))
            star2.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star2.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star2.addLine(to: CGPoint(x: 0, y: 13.47))
            star2.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star2.addLine(to: CGPoint(x: 19.02, y: 0))
            star2.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star2.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star2.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star2.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star2.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star2.close()
            context.saveGState()
            context.translateBy(x: 94, y: 87)
            star2.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            star2.fill()
            star2.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star2.stroke()
            context.restoreGState()
            
            /// Star
            let star3 = UIBezierPath()
            star3.move(to: CGPoint(x: 19.02, y: 29.25))
            star3.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star3.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star3.addLine(to: CGPoint(x: 0, y: 13.47))
            star3.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star3.addLine(to: CGPoint(x: 19.02, y: 0))
            star3.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star3.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star3.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star3.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star3.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star3.close()
            context.saveGState()
            context.translateBy(x: 140, y: 87)
            star3.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            star3.fill()
            star3.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star3.stroke()
            context.restoreGState()
            
            /// Star
            let star4 = UIBezierPath()
            star4.move(to: CGPoint(x: 19.02, y: 29.25))
            star4.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star4.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star4.addLine(to: CGPoint(x: 0, y: 13.47))
            star4.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star4.addLine(to: CGPoint(x: 19.02, y: 0))
            star4.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star4.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star4.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star4.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star4.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star4.close()
            context.saveGState()
            context.translateBy(x: 186, y: 87)
            star4.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            star4.fill()
            star4.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star4.stroke()
            context.restoreGState()
            
            /// Star
            let star5 = UIBezierPath()
            star5.move(to: CGPoint(x: 19.02, y: 29.25))
            star5.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star5.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star5.addLine(to: CGPoint(x: 0, y: 13.47))
            star5.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star5.addLine(to: CGPoint(x: 19.02, y: 0))
            star5.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star5.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star5.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star5.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star5.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star5.close()
            context.saveGState()
            context.translateBy(x: 232, y: 87)
            star5.usesEvenOddFillRule = true
            UIColor(white: 0.847, alpha: 1).setFill()
            star5.fill()
            star5.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star5.stroke()
            context.restoreGState()
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 221)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// Write a review:
                    let writeAReview = NSMutableAttributedString(string: "Write a review:\n")
                    writeAReview.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: 15))
                    writeAReview.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 15, length: 1))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        writeAReview.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: writeAReview.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    writeAReview.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Rectangle
            let rectangle = UIBezierPath()
            rectangle.move(to: CGPoint(x: 2, y: 0))
            rectangle.addLine(to: CGPoint(x: 316, y: 0))
            rectangle.addCurve(to: CGPoint(x: 318, y: 2), controlPoint1: CGPoint(x: 317.1, y: 0), controlPoint2: CGPoint(x: 318, y: 0.9))
            rectangle.addLine(to: CGPoint(x: 318, y: 133))
            rectangle.addCurve(to: CGPoint(x: 316, y: 135), controlPoint1: CGPoint(x: 318, y: 134.1), controlPoint2: CGPoint(x: 317.1, y: 135))
            rectangle.addLine(to: CGPoint(x: 2, y: 135))
            rectangle.addCurve(to: CGPoint(x: 0, y: 133), controlPoint1: CGPoint(x: 0.9, y: 135), controlPoint2: CGPoint(x: 0, y: 134.1))
            rectangle.addLine(to: CGPoint(x: 0, y: 2))
            rectangle.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
            rectangle.close()
            context.saveGState()
            context.translateBy(x: 0, y: 248)
            rectangle.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle.fill()
            context.saveGState()
            rectangle.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.592, alpha: 1).setStroke()
            rectangle.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 3, y: 254)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// Great falafel with g
                    let greatFalafelWithG = NSMutableAttributedString(string: "Great falafel with good price. Unfortunately the  queue was \ntoo big, and the waiting time was 15+ mins. ")
                    greatFalafelWithG.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: greatFalafelWithG.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .justified
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        greatFalafelWithG.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: 61))
                    }
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .right
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        greatFalafelWithG.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 61, length: 44))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    greatFalafelWithG.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 383)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// Title:
                    let title = NSMutableAttributedString(string: "Title:")
                    title.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: title.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        title.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    title.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Rectangle
            let rectangle2 = UIBezierPath()
            rectangle2.move(to: CGPoint(x: 2, y: 0))
            rectangle2.addLine(to: CGPoint(x: 316, y: 0))
            rectangle2.addCurve(to: CGPoint(x: 318, y: 2), controlPoint1: CGPoint(x: 317.1, y: 0), controlPoint2: CGPoint(x: 318, y: 0.9))
            rectangle2.addLine(to: CGPoint(x: 318, y: 25))
            rectangle2.addCurve(to: CGPoint(x: 316, y: 27), controlPoint1: CGPoint(x: 318, y: 26.1), controlPoint2: CGPoint(x: 317.1, y: 27))
            rectangle2.addLine(to: CGPoint(x: 2, y: 27))
            rectangle2.addCurve(to: CGPoint(x: 0, y: 25), controlPoint1: CGPoint(x: 0.9, y: 27), controlPoint2: CGPoint(x: 0, y: 26.1))
            rectangle2.addLine(to: CGPoint(x: 0, y: 2))
            rectangle2.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
            rectangle2.close()
            context.saveGState()
            context.translateBy(x: 0, y: 410)
            rectangle2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle2.fill()
            context.saveGState()
            rectangle2.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle2.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.592, alpha: 1).setStroke()
            rectangle2.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 3, y: 410)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// Great falafel, big q
                    let greatFalafelBigQ = NSMutableAttributedString(string: "Great falafel, big queue.")
                    greatFalafelBigQ.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: greatFalafelBigQ.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .right
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        greatFalafelBigQ.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: greatFalafelBigQ.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    greatFalafelBigQ.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// large@2x-3
            // Warning: Image layers are not supported.
            
            /// Rectangle
            let rectangle3 = UIBezierPath()
            rectangle3.move(to: CGPoint.zero)
            rectangle3.addLine(to: CGPoint(x: 134, y: 0))
            rectangle3.addLine(to: CGPoint(x: 134, y: 35))
            rectangle3.addLine(to: CGPoint(x: 0, y: 35))
            rectangle3.addLine(to: CGPoint.zero)
            rectangle3.close()
            context.saveGState()
            context.translateBy(x: 92, y: 794)
            rectangle3.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            rectangle3.fill()
            context.saveGState()
            rectangle3.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle3.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setStroke()
            rectangle3.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// SUBMIT
            let sUBMIT = NSMutableAttributedString(string: "SUBMIT")
            sUBMIT.addAttribute(.font, value: UIFont(name: "Avenir-Light", size: 18)!, range: NSRange(location: 0, length: sUBMIT.length))
            sUBMIT.addAttribute(.kern, value: 0.6, range: NSRange(location: 0, length: sUBMIT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                sUBMIT.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sUBMIT.length))
            }
            sUBMIT.addAttribute(.foregroundColor, value: UIColor(hue: 0.532, saturation: 0.028, brightness: 0.97, alpha: 1), range: NSRange(location: 0, length: sUBMIT.length))
            context.saveGState()
            sUBMIT.draw(at: CGPoint(x: 124, y: 798))
            context.restoreGState()
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 458)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// Upload a photo of yo
                    let uploadAPhotoOfYo = NSMutableAttributedString(string: "Upload a photo of your product/s:")
                    uploadAPhotoOfYo.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: uploadAPhotoOfYo.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        uploadAPhotoOfYo.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: uploadAPhotoOfYo.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    uploadAPhotoOfYo.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// 46688641_1767948513333224_4550036697810731008_n
            // Warning: Image layers are not supported.
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 69, y: 738)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// DSC3451.JPG
                    let dSC3451JPG = NSMutableAttributedString(string: "DSC3451.JPG")
                    dSC3451JPG.addAttribute(.font, value: UIFont(name: "Helvetica", size: 6)!, range: NSRange(location: 0, length: dSC3451JPG.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        dSC3451JPG.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: dSC3451JPG.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    dSC3451JPG.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// fafas-logo
            // Warning: Image layers are not supported.
            
            context.restoreGState()
        }
        
        /// Bars/Navigation/Navigation Bar
        // Warning: New symbols are not supported.
        
        context.restoreGState()
    }
    
    class func drawFourthScreen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 832), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 832), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 832)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 48, y: 87)
            
            /// MP_RGB_NoTM_Logo+Type Horisontal Blue
            // Warning: Image layers are not supported.
            
            /// Star
            let star = UIBezierPath()
            star.move(to: CGPoint(x: 19.02, y: 29.25))
            star.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star.addLine(to: CGPoint(x: 0, y: 13.47))
            star.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star.addLine(to: CGPoint(x: 19.02, y: 0))
            star.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star.close()
            context.saveGState()
            context.translateBy(x: 47, y: 87)
            star.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            star.fill()
            star.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star.stroke()
            context.restoreGState()
            
            /// Star
            let star2 = UIBezierPath()
            star2.move(to: CGPoint(x: 19.02, y: 29.25))
            star2.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star2.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star2.addLine(to: CGPoint(x: 0, y: 13.47))
            star2.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star2.addLine(to: CGPoint(x: 19.02, y: 0))
            star2.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star2.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star2.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star2.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star2.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star2.close()
            context.saveGState()
            context.translateBy(x: 94, y: 87)
            star2.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            star2.fill()
            star2.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star2.stroke()
            context.restoreGState()
            
            /// Star
            let star3 = UIBezierPath()
            star3.move(to: CGPoint(x: 19.02, y: 29.25))
            star3.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star3.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star3.addLine(to: CGPoint(x: 0, y: 13.47))
            star3.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star3.addLine(to: CGPoint(x: 19.02, y: 0))
            star3.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star3.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star3.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star3.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star3.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star3.close()
            context.saveGState()
            context.translateBy(x: 140, y: 87)
            star3.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            star3.fill()
            star3.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star3.stroke()
            context.restoreGState()
            
            /// Star
            let star4 = UIBezierPath()
            star4.move(to: CGPoint(x: 19.02, y: 29.25))
            star4.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star4.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star4.addLine(to: CGPoint(x: 0, y: 13.47))
            star4.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star4.addLine(to: CGPoint(x: 19.02, y: 0))
            star4.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star4.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star4.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star4.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star4.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star4.close()
            context.saveGState()
            context.translateBy(x: 186, y: 87)
            star4.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            star4.fill()
            star4.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star4.stroke()
            context.restoreGState()
            
            /// Star
            let star5 = UIBezierPath()
            star5.move(to: CGPoint(x: 19.02, y: 29.25))
            star5.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star5.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star5.addLine(to: CGPoint(x: 0, y: 13.47))
            star5.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star5.addLine(to: CGPoint(x: 19.02, y: 0))
            star5.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star5.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star5.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star5.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star5.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star5.close()
            context.saveGState()
            context.translateBy(x: 232, y: 87)
            star5.usesEvenOddFillRule = true
            UIColor(white: 0.847, alpha: 1).setFill()
            star5.fill()
            star5.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star5.stroke()
            context.restoreGState()
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 222)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// Write a review:
                    let writeAReview = NSMutableAttributedString(string: "Write a review:\n")
                    writeAReview.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: 15))
                    writeAReview.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 15, length: 1))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        writeAReview.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: writeAReview.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    writeAReview.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Rectangle
            let rectangle = UIBezierPath()
            rectangle.move(to: CGPoint(x: 2, y: 0))
            rectangle.addLine(to: CGPoint(x: 316, y: 0))
            rectangle.addCurve(to: CGPoint(x: 318, y: 2), controlPoint1: CGPoint(x: 317.1, y: 0), controlPoint2: CGPoint(x: 318, y: 0.9))
            rectangle.addLine(to: CGPoint(x: 318, y: 133))
            rectangle.addCurve(to: CGPoint(x: 316, y: 135), controlPoint1: CGPoint(x: 318, y: 134.1), controlPoint2: CGPoint(x: 317.1, y: 135))
            rectangle.addLine(to: CGPoint(x: 2, y: 135))
            rectangle.addCurve(to: CGPoint(x: 0, y: 133), controlPoint1: CGPoint(x: 0.9, y: 135), controlPoint2: CGPoint(x: 0, y: 134.1))
            rectangle.addLine(to: CGPoint(x: 0, y: 2))
            rectangle.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
            rectangle.close()
            context.saveGState()
            context.translateBy(x: 0, y: 249)
            rectangle.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle.fill()
            context.saveGState()
            rectangle.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.592, alpha: 1).setStroke()
            rectangle.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 3, y: 255)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// Great falafel with g
                    let greatFalafelWithG = NSMutableAttributedString(string: "Great falafel with good price. Unfortunately the  queue was \ntoo big, and the waiting time was 15+ mins. ")
                    greatFalafelWithG.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: greatFalafelWithG.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .justified
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        greatFalafelWithG.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: 61))
                    }
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .right
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        greatFalafelWithG.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 61, length: 44))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    greatFalafelWithG.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 384)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// Title:
                    let title = NSMutableAttributedString(string: "Title:")
                    title.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: title.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        title.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    title.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Rectangle
            let rectangle2 = UIBezierPath()
            rectangle2.move(to: CGPoint(x: 2, y: 0))
            rectangle2.addLine(to: CGPoint(x: 316, y: 0))
            rectangle2.addCurve(to: CGPoint(x: 318, y: 2), controlPoint1: CGPoint(x: 317.1, y: 0), controlPoint2: CGPoint(x: 318, y: 0.9))
            rectangle2.addLine(to: CGPoint(x: 318, y: 25))
            rectangle2.addCurve(to: CGPoint(x: 316, y: 27), controlPoint1: CGPoint(x: 318, y: 26.1), controlPoint2: CGPoint(x: 317.1, y: 27))
            rectangle2.addLine(to: CGPoint(x: 2, y: 27))
            rectangle2.addCurve(to: CGPoint(x: 0, y: 25), controlPoint1: CGPoint(x: 0.9, y: 27), controlPoint2: CGPoint(x: 0, y: 26.1))
            rectangle2.addLine(to: CGPoint(x: 0, y: 2))
            rectangle2.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
            rectangle2.close()
            context.saveGState()
            context.translateBy(x: 0, y: 411)
            rectangle2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle2.fill()
            context.saveGState()
            rectangle2.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle2.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.592, alpha: 1).setStroke()
            rectangle2.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 3, y: 411)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// Great falafel, big q
                    let greatFalafelBigQ = NSMutableAttributedString(string: "Great falafel, big queue.")
                    greatFalafelBigQ.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: greatFalafelBigQ.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .right
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        greatFalafelBigQ.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: greatFalafelBigQ.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    greatFalafelBigQ.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 459)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// Upload a photo of yo
                    let uploadAPhotoOfYo = NSMutableAttributedString(string: "Upload a photo of your product/s:")
                    uploadAPhotoOfYo.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: uploadAPhotoOfYo.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        uploadAPhotoOfYo.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: uploadAPhotoOfYo.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    uploadAPhotoOfYo.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Oval
            let oval = UIBezierPath()
            oval.move(to: CGPoint(x: 23, y: 46))
            oval.addCurve(to: CGPoint(x: 46, y: 23), controlPoint1: CGPoint(x: 35.7, y: 46), controlPoint2: CGPoint(x: 46, y: 35.7))
            oval.addCurve(to: CGPoint(x: 23, y: 0), controlPoint1: CGPoint(x: 46, y: 10.3), controlPoint2: CGPoint(x: 35.7, y: 0))
            oval.addCurve(to: CGPoint(x: 0, y: 23), controlPoint1: CGPoint(x: 10.3, y: 0), controlPoint2: CGPoint(x: 0, y: 10.3))
            oval.addCurve(to: CGPoint(x: 23, y: 46), controlPoint1: CGPoint(x: 0, y: 35.7), controlPoint2: CGPoint(x: 10.3, y: 46))
            oval.close()
            context.saveGState()
            context.translateBy(x: 136, y: 514)
            oval.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            oval.fill()
            oval.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            oval.stroke()
            context.restoreGState()
            
            /// +
            let layer = NSMutableAttributedString(string: "+")
            layer.addAttribute(.font, value: UIFont(name: "Helvetica", size: 39)!, range: NSRange(location: 0, length: layer.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: layer.length))
            }
            // Warning: Text fill is not supported, use text color.
            context.saveGState()
            layer.draw(at: CGPoint(x: 147, y: 509))
            context.restoreGState()
            
            /// fafas-logo
            // Warning: Image layers are not supported.
            
            context.restoreGState()
        }
        
        /// Bars/Navigation/Navigation Bar
        // Warning: New symbols are not supported.
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 123, y: 698)
            
            /// large@2x-3
            // Warning: Image layers are not supported.
            
            /// Rectangle
            let rectangle3 = UIBezierPath()
            rectangle3.move(to: CGPoint.zero)
            rectangle3.addLine(to: CGPoint(x: 134, y: 0))
            rectangle3.addLine(to: CGPoint(x: 134, y: 35))
            rectangle3.addLine(to: CGPoint(x: 0, y: 35))
            rectangle3.addLine(to: CGPoint.zero)
            rectangle3.close()
            context.saveGState()
            context.translateBy(x: 18, y: 6)
            rectangle3.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            rectangle3.fill()
            context.saveGState()
            rectangle3.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle3.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setStroke()
            rectangle3.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// SUBMIT
            let sUBMIT = NSMutableAttributedString(string: "SUBMIT")
            sUBMIT.addAttribute(.font, value: UIFont(name: "Avenir-Light", size: 18)!, range: NSRange(location: 0, length: sUBMIT.length))
            sUBMIT.addAttribute(.kern, value: 0.6, range: NSRange(location: 0, length: sUBMIT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                sUBMIT.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sUBMIT.length))
            }
            sUBMIT.addAttribute(.foregroundColor, value: UIColor(hue: 0.532, saturation: 0.028, brightness: 0.97, alpha: 1), range: NSRange(location: 0, length: sUBMIT.length))
            context.saveGState()
            sUBMIT.draw(at: CGPoint(x: 50, y: 10))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawThirdScreen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 832), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 832), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 832)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 48, y: 87)
            
            /// MP_RGB_NoTM_Logo+Type Horisontal Blue
            // Warning: Image layers are not supported.
            
            /// Star
            let star = UIBezierPath()
            star.move(to: CGPoint(x: 19.02, y: 29.25))
            star.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star.addLine(to: CGPoint(x: 0, y: 13.47))
            star.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star.addLine(to: CGPoint(x: 19.02, y: 0))
            star.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star.close()
            context.saveGState()
            context.translateBy(x: 46, y: 87)
            star.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            star.fill()
            star.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star.stroke()
            context.restoreGState()
            
            /// Star
            let star2 = UIBezierPath()
            star2.move(to: CGPoint(x: 19.02, y: 29.25))
            star2.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star2.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star2.addLine(to: CGPoint(x: 0, y: 13.47))
            star2.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star2.addLine(to: CGPoint(x: 19.02, y: 0))
            star2.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star2.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star2.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star2.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star2.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star2.close()
            context.saveGState()
            context.translateBy(x: 93, y: 87)
            star2.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            star2.fill()
            star2.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star2.stroke()
            context.restoreGState()
            
            /// Star
            let star3 = UIBezierPath()
            star3.move(to: CGPoint(x: 19.02, y: 29.25))
            star3.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star3.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star3.addLine(to: CGPoint(x: 0, y: 13.47))
            star3.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star3.addLine(to: CGPoint(x: 19.02, y: 0))
            star3.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star3.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star3.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star3.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star3.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star3.close()
            context.saveGState()
            context.translateBy(x: 139, y: 87)
            star3.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            star3.fill()
            star3.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star3.stroke()
            context.restoreGState()
            
            /// Star
            let star4 = UIBezierPath()
            star4.move(to: CGPoint(x: 19.02, y: 29.25))
            star4.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star4.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star4.addLine(to: CGPoint(x: 0, y: 13.47))
            star4.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star4.addLine(to: CGPoint(x: 19.02, y: 0))
            star4.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star4.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star4.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star4.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star4.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star4.close()
            context.saveGState()
            context.translateBy(x: 185, y: 87)
            star4.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            star4.fill()
            star4.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star4.stroke()
            context.restoreGState()
            
            /// Star
            let star5 = UIBezierPath()
            star5.move(to: CGPoint(x: 19.02, y: 29.25))
            star5.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star5.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star5.addLine(to: CGPoint(x: 0, y: 13.47))
            star5.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star5.addLine(to: CGPoint(x: 19.02, y: 0))
            star5.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star5.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star5.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star5.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star5.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star5.close()
            context.saveGState()
            context.translateBy(x: 231, y: 87)
            star5.usesEvenOddFillRule = true
            UIColor(white: 0.847, alpha: 1).setFill()
            star5.fill()
            star5.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star5.stroke()
            context.restoreGState()
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 222)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// Write a review:
                    let writeAReview = NSMutableAttributedString(string: "Write a review:\n")
                    writeAReview.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: 15))
                    writeAReview.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 15, length: 1))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        writeAReview.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: writeAReview.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    writeAReview.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Rectangle
            let rectangle = UIBezierPath()
            rectangle.move(to: CGPoint(x: 2, y: 0))
            rectangle.addLine(to: CGPoint(x: 316, y: 0))
            rectangle.addCurve(to: CGPoint(x: 318, y: 2), controlPoint1: CGPoint(x: 317.1, y: 0), controlPoint2: CGPoint(x: 318, y: 0.9))
            rectangle.addLine(to: CGPoint(x: 318, y: 133))
            rectangle.addCurve(to: CGPoint(x: 316, y: 135), controlPoint1: CGPoint(x: 318, y: 134.1), controlPoint2: CGPoint(x: 317.1, y: 135))
            rectangle.addLine(to: CGPoint(x: 2, y: 135))
            rectangle.addCurve(to: CGPoint(x: 0, y: 133), controlPoint1: CGPoint(x: 0.9, y: 135), controlPoint2: CGPoint(x: 0, y: 134.1))
            rectangle.addLine(to: CGPoint(x: 0, y: 2))
            rectangle.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
            rectangle.close()
            context.saveGState()
            context.translateBy(x: 0, y: 249)
            rectangle.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle.fill()
            context.saveGState()
            rectangle.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.592, alpha: 1).setStroke()
            rectangle.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 7, y: 255)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// Say a couple of word
                    let sayACoupleOfWord = NSMutableAttributedString(string: "Say a couple of words about your experience.\n")
                    sayACoupleOfWord.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: 44))
                    sayACoupleOfWord.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 44, length: 1))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .right
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        sayACoupleOfWord.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sayACoupleOfWord.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    sayACoupleOfWord.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 384)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// Title:
                    let title = NSMutableAttributedString(string: "Title:")
                    title.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: title.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        title.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    title.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Rectangle
            let rectangle2 = UIBezierPath()
            rectangle2.move(to: CGPoint(x: 2, y: 0))
            rectangle2.addLine(to: CGPoint(x: 316, y: 0))
            rectangle2.addCurve(to: CGPoint(x: 318, y: 2), controlPoint1: CGPoint(x: 317.1, y: 0), controlPoint2: CGPoint(x: 318, y: 0.9))
            rectangle2.addLine(to: CGPoint(x: 318, y: 25))
            rectangle2.addCurve(to: CGPoint(x: 316, y: 27), controlPoint1: CGPoint(x: 318, y: 26.1), controlPoint2: CGPoint(x: 317.1, y: 27))
            rectangle2.addLine(to: CGPoint(x: 2, y: 27))
            rectangle2.addCurve(to: CGPoint(x: 0, y: 25), controlPoint1: CGPoint(x: 0.9, y: 27), controlPoint2: CGPoint(x: 0, y: 26.1))
            rectangle2.addLine(to: CGPoint(x: 0, y: 2))
            rectangle2.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
            rectangle2.close()
            context.saveGState()
            context.translateBy(x: 0, y: 411)
            rectangle2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle2.fill()
            context.saveGState()
            rectangle2.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle2.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.592, alpha: 1).setStroke()
            rectangle2.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 7, y: 411)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// Add an additional ti
                    let addAnAdditionalTi = NSMutableAttributedString(string: "Add an additional title to your review.")
                    addAnAdditionalTi.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: addAnAdditionalTi.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .right
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        addAnAdditionalTi.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: addAnAdditionalTi.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    addAnAdditionalTi.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Content
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 459)
                
                /// Text content
                do {
                    context.saveGState()
                    
                    /// Upload a photo of yo
                    let uploadAPhotoOfYo = NSMutableAttributedString(string: "Upload a photo of your product/s:")
                    uploadAPhotoOfYo.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: uploadAPhotoOfYo.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.alignment = .center
                        paragraphStyle.maximumLineHeight = 27
                        paragraphStyle.minimumLineHeight = 27
                        uploadAPhotoOfYo.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: uploadAPhotoOfYo.length))
                    }
                    // Warning: Text fill is not supported, use text color.
                    context.saveGState()
                    uploadAPhotoOfYo.draw(at: CGPoint.zero)
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// Oval
            let oval = UIBezierPath()
            oval.move(to: CGPoint(x: 23, y: 46))
            oval.addCurve(to: CGPoint(x: 46, y: 23), controlPoint1: CGPoint(x: 35.7, y: 46), controlPoint2: CGPoint(x: 46, y: 35.7))
            oval.addCurve(to: CGPoint(x: 23, y: 0), controlPoint1: CGPoint(x: 46, y: 10.3), controlPoint2: CGPoint(x: 35.7, y: 0))
            oval.addCurve(to: CGPoint(x: 0, y: 23), controlPoint1: CGPoint(x: 10.3, y: 0), controlPoint2: CGPoint(x: 0, y: 10.3))
            oval.addCurve(to: CGPoint(x: 23, y: 46), controlPoint1: CGPoint(x: 0, y: 35.7), controlPoint2: CGPoint(x: 10.3, y: 46))
            oval.close()
            context.saveGState()
            context.translateBy(x: 136, y: 514)
            oval.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            oval.fill()
            oval.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            oval.stroke()
            context.restoreGState()
            
            /// +
            let layer = NSMutableAttributedString(string: "+")
            layer.addAttribute(.font, value: UIFont(name: "Helvetica", size: 39)!, range: NSRange(location: 0, length: layer.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                layer.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: layer.length))
            }
            // Warning: Text fill is not supported, use text color.
            context.saveGState()
            layer.draw(at: CGPoint(x: 147, y: 509))
            context.restoreGState()
            
            /// fafas-logo
            // Warning: Image layers are not supported.
            
            context.restoreGState()
        }
        
        /// Bars/Navigation/Navigation Bar
        // Warning: New symbols are not supported.
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: 123, y: 701)
            
            /// large@2x-3
            // Warning: Image layers are not supported.
            
            /// Rectangle
            let rectangle3 = UIBezierPath()
            rectangle3.move(to: CGPoint.zero)
            rectangle3.addLine(to: CGPoint(x: 134, y: 0))
            rectangle3.addLine(to: CGPoint(x: 134, y: 35))
            rectangle3.addLine(to: CGPoint(x: 0, y: 35))
            rectangle3.addLine(to: CGPoint.zero)
            rectangle3.close()
            context.saveGState()
            context.translateBy(x: 18, y: 6)
            rectangle3.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            rectangle3.fill()
            context.saveGState()
            rectangle3.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle3.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setStroke()
            rectangle3.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// SUBMIT
            let sUBMIT = NSMutableAttributedString(string: "SUBMIT")
            sUBMIT.addAttribute(.font, value: UIFont(name: "Avenir-Light", size: 18)!, range: NSRange(location: 0, length: sUBMIT.length))
            sUBMIT.addAttribute(.kern, value: 0.6, range: NSRange(location: 0, length: sUBMIT.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                sUBMIT.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sUBMIT.length))
            }
            sUBMIT.addAttribute(.foregroundColor, value: UIColor(hue: 0.532, saturation: 0.028, brightness: 0.97, alpha: 1), range: NSRange(location: 0, length: sUBMIT.length))
            context.saveGState()
            sUBMIT.draw(at: CGPoint(x: 50, y: 10))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawSecondScreen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 832), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 832), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 832)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// MP_RGB_NoTM_Logo+Type Horisontal Blue
        // Warning: Image layers are not supported.
        
        /// Bars/Navigation/Navigation Bar
        // Warning: New symbols are not supported.
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 95, y: 174)
            
            /// Star
            let star = UIBezierPath()
            star.move(to: CGPoint(x: 19.02, y: 29.25))
            star.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star.addLine(to: CGPoint(x: 0, y: 13.47))
            star.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star.addLine(to: CGPoint(x: 19.02, y: 0))
            star.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star.close()
            context.saveGState()
            context.translateBy(x: 0.04, y: 0)
            star.usesEvenOddFillRule = true
            UIColor(white: 0.847, alpha: 1).setFill()
            star.fill()
            star.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star.stroke()
            context.restoreGState()
            
            /// Star
            let star2 = UIBezierPath()
            star2.move(to: CGPoint(x: 19.02, y: 29.25))
            star2.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star2.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star2.addLine(to: CGPoint(x: 0, y: 13.47))
            star2.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star2.addLine(to: CGPoint(x: 19.02, y: 0))
            star2.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star2.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star2.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star2.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star2.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star2.close()
            context.saveGState()
            context.translateBy(x: 47, y: 0)
            star2.usesEvenOddFillRule = true
            UIColor(white: 0.847, alpha: 1).setFill()
            star2.fill()
            star2.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star2.stroke()
            context.restoreGState()
            
            /// Star
            let star3 = UIBezierPath()
            star3.move(to: CGPoint(x: 19.02, y: 29.25))
            star3.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star3.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star3.addLine(to: CGPoint(x: 0, y: 13.47))
            star3.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star3.addLine(to: CGPoint(x: 19.02, y: 0))
            star3.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star3.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star3.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star3.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star3.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star3.close()
            context.saveGState()
            context.translateBy(x: 92.98, y: 0)
            star3.usesEvenOddFillRule = true
            UIColor(white: 0.847, alpha: 1).setFill()
            star3.fill()
            star3.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star3.stroke()
            context.restoreGState()
            
            /// Star
            let star4 = UIBezierPath()
            star4.move(to: CGPoint(x: 19.02, y: 29.25))
            star4.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star4.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star4.addLine(to: CGPoint(x: 0, y: 13.47))
            star4.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star4.addLine(to: CGPoint(x: 19.02, y: 0))
            star4.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star4.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star4.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star4.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star4.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star4.close()
            context.saveGState()
            context.translateBy(x: 138.96, y: 0)
            star4.usesEvenOddFillRule = true
            UIColor(white: 0.847, alpha: 1).setFill()
            star4.fill()
            star4.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star4.stroke()
            context.restoreGState()
            
            /// Star
            let star5 = UIBezierPath()
            star5.move(to: CGPoint(x: 19.02, y: 29.25))
            star5.addLine(to: CGPoint(x: 7.27, y: 35.28))
            star5.addLine(to: CGPoint(x: 9.51, y: 22.51))
            star5.addLine(to: CGPoint(x: 0, y: 13.47))
            star5.addLine(to: CGPoint(x: 13.14, y: 11.61))
            star5.addLine(to: CGPoint(x: 19.02, y: 0))
            star5.addLine(to: CGPoint(x: 24.9, y: 11.61))
            star5.addLine(to: CGPoint(x: 38.04, y: 13.47))
            star5.addLine(to: CGPoint(x: 28.53, y: 22.51))
            star5.addLine(to: CGPoint(x: 30.78, y: 35.28))
            star5.addLine(to: CGPoint(x: 19.02, y: 29.25))
            star5.close()
            context.saveGState()
            context.translateBy(x: 184.94, y: 0)
            star5.usesEvenOddFillRule = true
            UIColor(white: 0.847, alpha: 1).setFill()
            star5.fill()
            star5.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            star5.stroke()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// Content
        do {
            context.saveGState()
            context.translateBy(x: 40, y: 309)
            
            /// Text content
            do {
                context.saveGState()
                
                /// Write a review:
                let writeAReview = NSMutableAttributedString(string: "Write a review:\n")
                writeAReview.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: 15))
                writeAReview.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 15, length: 1))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 27
                    paragraphStyle.minimumLineHeight = 27
                    writeAReview.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: writeAReview.length))
                }
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                writeAReview.draw(at: CGPoint.zero)
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint(x: 2, y: 0))
        rectangle.addLine(to: CGPoint(x: 316, y: 0))
        rectangle.addCurve(to: CGPoint(x: 318, y: 2), controlPoint1: CGPoint(x: 317.1, y: 0), controlPoint2: CGPoint(x: 318, y: 0.9))
        rectangle.addLine(to: CGPoint(x: 318, y: 133))
        rectangle.addCurve(to: CGPoint(x: 316, y: 135), controlPoint1: CGPoint(x: 318, y: 134.1), controlPoint2: CGPoint(x: 317.1, y: 135))
        rectangle.addLine(to: CGPoint(x: 2, y: 135))
        rectangle.addCurve(to: CGPoint(x: 0, y: 133), controlPoint1: CGPoint(x: 0.9, y: 135), controlPoint2: CGPoint(x: 0, y: 134.1))
        rectangle.addLine(to: CGPoint(x: 0, y: 2))
        rectangle.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
        rectangle.close()
        context.saveGState()
        context.translateBy(x: 40, y: 334)
        rectangle.usesEvenOddFillRule = true
        UIColor.white.setFill()
        rectangle.fill()
        context.saveGState()
        rectangle.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Content
        do {
            context.saveGState()
            context.translateBy(x: 43, y: 336)
            
            /// Text content
            do {
                context.saveGState()
                
                /// Say a couple of word
                let sayACoupleOfWord = NSMutableAttributedString(string: "Say a couple of words about your experience.\n")
                sayACoupleOfWord.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: 44))
                sayACoupleOfWord.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 44, length: 1))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    paragraphStyle.maximumLineHeight = 27
                    paragraphStyle.minimumLineHeight = 27
                    sayACoupleOfWord.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sayACoupleOfWord.length))
                }
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                sayACoupleOfWord.draw(at: CGPoint.zero)
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Content
        do {
            context.saveGState()
            context.translateBy(x: 40, y: 471)
            
            /// Text content
            do {
                context.saveGState()
                
                /// Title:
                let title = NSMutableAttributedString(string: "Title:")
                title.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: title.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 27
                    paragraphStyle.minimumLineHeight = 27
                    title.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: title.length))
                }
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                title.draw(at: CGPoint.zero)
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Rectangle
        let rectangle2 = UIBezierPath()
        rectangle2.move(to: CGPoint(x: 2, y: 0))
        rectangle2.addLine(to: CGPoint(x: 316, y: 0))
        rectangle2.addCurve(to: CGPoint(x: 318, y: 2), controlPoint1: CGPoint(x: 317.1, y: 0), controlPoint2: CGPoint(x: 318, y: 0.9))
        rectangle2.addLine(to: CGPoint(x: 318, y: 25))
        rectangle2.addCurve(to: CGPoint(x: 316, y: 27), controlPoint1: CGPoint(x: 318, y: 26.1), controlPoint2: CGPoint(x: 317.1, y: 27))
        rectangle2.addLine(to: CGPoint(x: 2, y: 27))
        rectangle2.addCurve(to: CGPoint(x: 0, y: 25), controlPoint1: CGPoint(x: 0.9, y: 27), controlPoint2: CGPoint(x: 0, y: 26.1))
        rectangle2.addLine(to: CGPoint(x: 0, y: 2))
        rectangle2.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
        rectangle2.close()
        context.saveGState()
        context.translateBy(x: 40, y: 496)
        rectangle2.usesEvenOddFillRule = true
        UIColor.white.setFill()
        rectangle2.fill()
        context.saveGState()
        rectangle2.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle2.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle2.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Content
        do {
            context.saveGState()
            context.translateBy(x: 43, y: 496)
            
            /// Text content
            do {
                context.saveGState()
                
                /// Add an additional ti
                let addAnAdditionalTi = NSMutableAttributedString(string: "Add an additional title to your review.")
                addAnAdditionalTi.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: addAnAdditionalTi.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .right
                    paragraphStyle.maximumLineHeight = 27
                    paragraphStyle.minimumLineHeight = 27
                    addAnAdditionalTi.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: addAnAdditionalTi.length))
                }
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                addAnAdditionalTi.draw(at: CGPoint.zero)
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// large@2x-3
        // Warning: Image layers are not supported.
        
        /// Rectangle
        let rectangle3 = UIBezierPath()
        rectangle3.move(to: CGPoint.zero)
        rectangle3.addLine(to: CGPoint(x: 134, y: 0))
        rectangle3.addLine(to: CGPoint(x: 134, y: 35))
        rectangle3.addLine(to: CGPoint(x: 0, y: 35))
        rectangle3.addLine(to: CGPoint.zero)
        rectangle3.close()
        context.saveGState()
        context.translateBy(x: 140, y: 708)
        rectangle3.usesEvenOddFillRule = true
        UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
        rectangle3.fill()
        context.saveGState()
        rectangle3.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle3.cgPath)
        context.clip(using: .evenOdd)
        UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setStroke()
        rectangle3.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// SUBMIT
        let sUBMIT = NSMutableAttributedString(string: "SUBMIT")
        sUBMIT.addAttribute(.font, value: UIFont(name: "Avenir-Light", size: 18)!, range: NSRange(location: 0, length: sUBMIT.length))
        sUBMIT.addAttribute(.kern, value: 0.6, range: NSRange(location: 0, length: sUBMIT.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            sUBMIT.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: sUBMIT.length))
        }
        sUBMIT.addAttribute(.foregroundColor, value: UIColor(hue: 0.532, saturation: 0.028, brightness: 0.97, alpha: 1), range: NSRange(location: 0, length: sUBMIT.length))
        context.saveGState()
        sUBMIT.draw(at: CGPoint(x: 173, y: 714))
        context.restoreGState()
        
        /// Content
        do {
            context.saveGState()
            context.translateBy(x: 40, y: 546)
            
            /// Text content
            do {
                context.saveGState()
                
                /// Upload a photo of yo
                let uploadAPhotoOfYo = NSMutableAttributedString(string: "Upload a photo of your product/s:")
                uploadAPhotoOfYo.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: uploadAPhotoOfYo.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 27
                    paragraphStyle.minimumLineHeight = 27
                    uploadAPhotoOfYo.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: uploadAPhotoOfYo.length))
                }
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                uploadAPhotoOfYo.draw(at: CGPoint.zero)
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Oval
        let oval = UIBezierPath()
        oval.move(to: CGPoint(x: 23, y: 46))
        oval.addCurve(to: CGPoint(x: 46, y: 23), controlPoint1: CGPoint(x: 35.7, y: 46), controlPoint2: CGPoint(x: 46, y: 35.7))
        oval.addCurve(to: CGPoint(x: 23, y: 0), controlPoint1: CGPoint(x: 46, y: 10.3), controlPoint2: CGPoint(x: 35.7, y: 0))
        oval.addCurve(to: CGPoint(x: 0, y: 23), controlPoint1: CGPoint(x: 10.3, y: 0), controlPoint2: CGPoint(x: 0, y: 10.3))
        oval.addCurve(to: CGPoint(x: 23, y: 46), controlPoint1: CGPoint(x: 0, y: 35.7), controlPoint2: CGPoint(x: 10.3, y: 46))
        oval.close()
        context.saveGState()
        context.translateBy(x: 184, y: 601)
        oval.usesEvenOddFillRule = true
        UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
        oval.fill()
        oval.lineWidth = 1
        UIColor(white: 0.592, alpha: 1).setStroke()
        oval.stroke()
        context.restoreGState()
        
        /// +
        let layer = NSMutableAttributedString(string: "+")
        layer.addAttribute(.font, value: UIFont(name: "Helvetica", size: 39)!, range: NSRange(location: 0, length: layer.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            layer.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: layer.length))
        }
        // Warning: Text fill is not supported, use text color.
        context.saveGState()
        layer.draw(at: CGPoint(x: 195, y: 596))
        context.restoreGState()
        
        /// fafas-logo
        // Warning: Image layers are not supported.
        
        context.restoreGState()
    }
    
    class func drawFirstScreen(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 736), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 736), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 736)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Content
        do {
            context.saveGState()
            context.translateBy(x: 85, y: 197)
            
            /// Text content
            do {
                context.saveGState()
                
                /// You successfully pai
                let youSuccessfullyPai = NSMutableAttributedString(string: "You successfully paid 9.93â¬ to\nFafaâs.\n")
                youSuccessfullyPai.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 0, length: youSuccessfullyPai.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 27
                    paragraphStyle.minimumLineHeight = 27
                    youSuccessfullyPai.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: youSuccessfullyPai.length))
                }
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                youSuccessfullyPai.draw(at: CGPoint.zero)
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint(x: 2, y: 0))
        rectangle.addLine(to: CGPoint(x: 323, y: 0))
        rectangle.addCurve(to: CGPoint(x: 325, y: 2), controlPoint1: CGPoint(x: 324.1, y: 0), controlPoint2: CGPoint(x: 325, y: 0.9))
        rectangle.addLine(to: CGPoint(x: 325, y: 8))
        rectangle.addCurve(to: CGPoint(x: 323, y: 10), controlPoint1: CGPoint(x: 325, y: 9.1), controlPoint2: CGPoint(x: 324.1, y: 10))
        rectangle.addLine(to: CGPoint(x: 2, y: 10))
        rectangle.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0.9, y: 10), controlPoint2: CGPoint(x: 0, y: 9.1))
        rectangle.addLine(to: CGPoint(x: 0, y: 2))
        rectangle.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
        rectangle.close()
        context.saveGState()
        context.translateBy(x: 25, y: 521)
        rectangle.usesEvenOddFillRule = true
        UIColor(white: 0.847, alpha: 1).setFill()
        rectangle.fill()
        context.saveGState()
        rectangle.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Rectangle
        let rectangle2 = UIBezierPath()
        rectangle2.move(to: CGPoint(x: 2, y: 0))
        rectangle2.addLine(to: CGPoint(x: 274, y: 0))
        rectangle2.addCurve(to: CGPoint(x: 276, y: 2), controlPoint1: CGPoint(x: 275.1, y: 0), controlPoint2: CGPoint(x: 276, y: 0.9))
        rectangle2.addLine(to: CGPoint(x: 276, y: 8))
        rectangle2.addCurve(to: CGPoint(x: 274, y: 10), controlPoint1: CGPoint(x: 276, y: 9.1), controlPoint2: CGPoint(x: 275.1, y: 10))
        rectangle2.addLine(to: CGPoint(x: 2, y: 10))
        rectangle2.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0.9, y: 10), controlPoint2: CGPoint(x: 0, y: 9.1))
        rectangle2.addLine(to: CGPoint(x: 0, y: 2))
        rectangle2.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
        rectangle2.close()
        context.saveGState()
        context.translateBy(x: 25, y: 521)
        rectangle2.usesEvenOddFillRule = true
        UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
        rectangle2.fill()
        context.saveGState()
        rectangle2.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle2.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle2.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Content
        do {
            context.saveGState()
            context.translateBy(x: 126, y: 491)
            
            /// Text content
            do {
                context.saveGState()
                
                /// Reviews needed for L
                let reviewsNeededForL = NSMutableAttributedString(string: "Reviews needed for Level 2: 1\n")
                reviewsNeededForL.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: 29))
                reviewsNeededForL.addAttribute(.font, value: UIFont(name: "Helvetica", size: 18)!, range: NSRange(location: 29, length: 1))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 27
                    paragraphStyle.minimumLineHeight = 27
                    reviewsNeededForL.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: reviewsNeededForL.length))
                }
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                reviewsNeededForL.draw(at: CGPoint(x: 0.5, y: 0))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        /// large@2x-3
        // Warning: Image layers are not supported.
        
        /// Rectangle
        let rectangle3 = UIBezierPath()
        rectangle3.move(to: CGPoint.zero)
        rectangle3.addLine(to: CGPoint(x: 134, y: 0))
        rectangle3.addLine(to: CGPoint(x: 134, y: 35))
        rectangle3.addLine(to: CGPoint(x: 0, y: 35))
        rectangle3.addLine(to: CGPoint.zero)
        rectangle3.close()
        context.saveGState()
        context.translateBy(x: 140, y: 377)
        rectangle3.usesEvenOddFillRule = true
        UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
        rectangle3.fill()
        context.saveGState()
        rectangle3.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle3.cgPath)
        context.clip(using: .evenOdd)
        UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setStroke()
        rectangle3.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Leave a review
        let leaveAReview = NSMutableAttributedString(string: "Leave a review")
        leaveAReview.addAttribute(.font, value: UIFont(name: "Avenir-Light", size: 18)!, range: NSRange(location: 0, length: leaveAReview.length))
        leaveAReview.addAttribute(.kern, value: 0.6, range: NSRange(location: 0, length: leaveAReview.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            leaveAReview.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: leaveAReview.length))
        }
        leaveAReview.addAttribute(.foregroundColor, value: UIColor(hue: 0.532, saturation: 0.028, brightness: 0.97, alpha: 1), range: NSRange(location: 0, length: leaveAReview.length))
        context.saveGState()
        leaveAReview.draw(at: CGPoint(x: 145, y: 381))
        context.restoreGState()
        
        /// Bars/Navigation/Navigation Bar
        // Warning: New symbols are not supported.
        
        /// Rectangle
        let rectangle4 = UIBezierPath()
        rectangle4.move(to: CGPoint.zero)
        rectangle4.addLine(to: CGPoint(x: 72, y: 0))
        rectangle4.addLine(to: CGPoint(x: 72, y: 29))
        rectangle4.addLine(to: CGPoint(x: 0, y: 29))
        rectangle4.addLine(to: CGPoint.zero)
        rectangle4.close()
        context.saveGState()
        context.translateBy(x: 0, y: 26)
        rectangle4.usesEvenOddFillRule = true
        UIColor(white: 0.976, alpha: 1).setFill()
        rectangle4.fill()
        context.saveGState()
        rectangle4.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle4.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.976, alpha: 1).setStroke()
        rectangle4.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// MP_RGB_NoTM_Logo+Type Horisontal Blue
        // Warning: Image layers are not supported.
        
        /// fafas-logo
        // Warning: Image layers are not supported.
        
        /// Content
        do {
            context.saveGState()
            context.translateBy(x: 195, y: 531)
            
            /// Text content
            do {
                context.saveGState()
                
                /// 9/10
                let _910 = NSMutableAttributedString(string: "9/10")
                _910.addAttribute(.font, value: UIFont(name: "Helvetica", size: 12)!, range: NSRange(location: 0, length: _910.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 27
                    paragraphStyle.minimumLineHeight = 27
                    _910.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: _910.length))
                }
                // Warning: Text fill is not supported, use text color.
                context.saveGState()
                _910.draw(at: CGPoint(x: 0.5, y: 0))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    /// Page 2
    
    class func drawThirdScreen2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 1159), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 1159), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 1159)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Bars/Navigation/Navigation Bar
        // Warning: New symbols are not supported.
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint.zero)
        rectangle.addLine(to: CGPoint(x: 63, y: 0))
        rectangle.addLine(to: CGPoint(x: 63, y: 31))
        rectangle.addLine(to: CGPoint(x: 0, y: 31))
        rectangle.addLine(to: CGPoint.zero)
        rectangle.close()
        context.saveGState()
        context.translateBy(x: 338, y: 24)
        rectangle.usesEvenOddFillRule = true
        UIColor(white: 0.976, alpha: 1).setFill()
        rectangle.fill()
        context.saveGState()
        rectangle.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.976, alpha: 1).setStroke()
        rectangle.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// MP_RGB_NoTM_Logo+Type Horisontal Blue
        // Warning: Image layers are not supported.
        
        /// MP_RGB_NoTM_Logo+Type Horisontal Blue
        // Warning: Image layers are not supported.
        
        /// Group 2
        do {
            context.saveGState()
            context.translateBy(x: -1, y: 171)
            
            /// The_Body_Shop_logo
            // Warning: Image layers are not supported.
            
            /// Screen Shot 2018-11-24 at 16.11.18
            // Warning: Image layers are not supported.
            
            /// Kamppi Center Urho K
            let kamppiCenterUrhoK = NSMutableAttributedString(string: "Kamppi Center\nUrho Kekkosen katu 1\n0757532442\n\nOpen 24 hours\n")
            kamppiCenterUrhoK.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: kamppiCenterUrhoK.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                kamppiCenterUrhoK.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: kamppiCenterUrhoK.length))
            }
            context.saveGState()
            kamppiCenterUrhoK.draw(at: CGPoint(x: 140, y: 169))
            context.restoreGState()
            
            /// Review Summary:
            let reviewSummary = NSMutableAttributedString(string: "Review Summary:\n")
            reviewSummary.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: reviewSummary.length))
            context.saveGState()
            reviewSummary.draw(at: CGPoint(x: 77, y: 493))
            context.restoreGState()
            
            /// Group
            do {
                context.saveGState()
                context.translateBy(x: 96, y: 535)
                
                /// Star
                let star = UIBezierPath()
                star.move(to: CGPoint(x: 19.02, y: 29.25))
                star.addLine(to: CGPoint(x: 7.27, y: 35.28))
                star.addLine(to: CGPoint(x: 9.51, y: 22.51))
                star.addLine(to: CGPoint(x: 0, y: 13.47))
                star.addLine(to: CGPoint(x: 13.14, y: 11.61))
                star.addLine(to: CGPoint(x: 19.02, y: 0))
                star.addLine(to: CGPoint(x: 24.9, y: 11.61))
                star.addLine(to: CGPoint(x: 38.04, y: 13.47))
                star.addLine(to: CGPoint(x: 28.53, y: 22.51))
                star.addLine(to: CGPoint(x: 30.78, y: 35.28))
                star.addLine(to: CGPoint(x: 19.02, y: 29.25))
                star.close()
                context.saveGState()
                star.usesEvenOddFillRule = true
                UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
                star.fill()
                star.lineWidth = 1
                UIColor(white: 0.592, alpha: 1).setStroke()
                star.stroke()
                context.restoreGState()
                
                /// Star
                let star2 = UIBezierPath()
                star2.move(to: CGPoint(x: 19.02, y: 29.25))
                star2.addLine(to: CGPoint(x: 7.27, y: 35.28))
                star2.addLine(to: CGPoint(x: 9.51, y: 22.51))
                star2.addLine(to: CGPoint(x: 0, y: 13.47))
                star2.addLine(to: CGPoint(x: 13.14, y: 11.61))
                star2.addLine(to: CGPoint(x: 19.02, y: 0))
                star2.addLine(to: CGPoint(x: 24.9, y: 11.61))
                star2.addLine(to: CGPoint(x: 38.04, y: 13.47))
                star2.addLine(to: CGPoint(x: 28.53, y: 22.51))
                star2.addLine(to: CGPoint(x: 30.78, y: 35.28))
                star2.addLine(to: CGPoint(x: 19.02, y: 29.25))
                star2.close()
                context.saveGState()
                context.translateBy(x: 47, y: 0)
                star2.usesEvenOddFillRule = true
                UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
                star2.fill()
                star2.lineWidth = 1
                UIColor(white: 0.592, alpha: 1).setStroke()
                star2.stroke()
                context.restoreGState()
                
                /// Star
                let star3 = UIBezierPath()
                star3.move(to: CGPoint(x: 19.02, y: 29.25))
                star3.addLine(to: CGPoint(x: 7.27, y: 35.28))
                star3.addLine(to: CGPoint(x: 9.51, y: 22.51))
                star3.addLine(to: CGPoint(x: 0, y: 13.47))
                star3.addLine(to: CGPoint(x: 13.14, y: 11.61))
                star3.addLine(to: CGPoint(x: 19.02, y: 0))
                star3.addLine(to: CGPoint(x: 24.9, y: 11.61))
                star3.addLine(to: CGPoint(x: 38.04, y: 13.47))
                star3.addLine(to: CGPoint(x: 28.53, y: 22.51))
                star3.addLine(to: CGPoint(x: 30.78, y: 35.28))
                star3.addLine(to: CGPoint(x: 19.02, y: 29.25))
                star3.close()
                context.saveGState()
                context.translateBy(x: 93, y: 0)
                star3.usesEvenOddFillRule = true
                UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
                star3.fill()
                star3.lineWidth = 1
                UIColor(white: 0.592, alpha: 1).setStroke()
                star3.stroke()
                context.restoreGState()
                
                /// Star
                let star4 = UIBezierPath()
                star4.move(to: CGPoint(x: 19.02, y: 29.25))
                star4.addLine(to: CGPoint(x: 7.27, y: 35.28))
                star4.addLine(to: CGPoint(x: 9.51, y: 22.51))
                star4.addLine(to: CGPoint(x: 0, y: 13.47))
                star4.addLine(to: CGPoint(x: 13.14, y: 11.61))
                star4.addLine(to: CGPoint(x: 19.02, y: 0))
                star4.addLine(to: CGPoint(x: 24.9, y: 11.61))
                star4.addLine(to: CGPoint(x: 38.04, y: 13.47))
                star4.addLine(to: CGPoint(x: 28.53, y: 22.51))
                star4.addLine(to: CGPoint(x: 30.78, y: 35.28))
                star4.addLine(to: CGPoint(x: 19.02, y: 29.25))
                star4.close()
                context.saveGState()
                context.translateBy(x: 139, y: 0)
                star4.usesEvenOddFillRule = true
                UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
                star4.fill()
                star4.lineWidth = 1
                UIColor(white: 0.592, alpha: 1).setStroke()
                star4.stroke()
                context.restoreGState()
                
                /// Star
                let star5 = UIBezierPath()
                star5.move(to: CGPoint(x: 19.02, y: 29.25))
                star5.addLine(to: CGPoint(x: 7.27, y: 35.28))
                star5.addLine(to: CGPoint(x: 9.51, y: 22.51))
                star5.addLine(to: CGPoint(x: 0, y: 13.47))
                star5.addLine(to: CGPoint(x: 13.14, y: 11.61))
                star5.addLine(to: CGPoint(x: 19.02, y: 0))
                star5.addLine(to: CGPoint(x: 24.9, y: 11.61))
                star5.addLine(to: CGPoint(x: 38.04, y: 13.47))
                star5.addLine(to: CGPoint(x: 28.53, y: 22.51))
                star5.addLine(to: CGPoint(x: 30.78, y: 35.28))
                star5.addLine(to: CGPoint(x: 19.02, y: 29.25))
                star5.close()
                context.saveGState()
                context.translateBy(x: 185, y: 0)
                star5.usesEvenOddFillRule = true
                UIColor(white: 0.847, alpha: 1).setFill()
                star5.fill()
                star5.lineWidth = 1
                UIColor(white: 0.592, alpha: 1).setStroke()
                star5.stroke()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// âGood quality natura
            let goodQualityNatura = NSMutableAttributedString(string: "âGood quality natural cosmetics. Very friendly staff.â")
            goodQualityNatura.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: 14))
            goodQualityNatura.addAttribute(.font, value: UIFont(name: "Helvetica-Bold", size: 14)!, range: NSRange(location: 14, length: 17))
            goodQualityNatura.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 31, length: 23))
            context.saveGState()
            goodQualityNatura.draw(in: CGRect(x: 88, y: 611, width: 242, height: 38))
            context.restoreGState()
            
            /// âFast and effective.
            let fastAndEffective = NSMutableAttributedString(string: "âFast and effective. Great choice of \nbody lotions and soaps.â\n\n\n\nâGreat asortiment of cruelty free \ncosmetics. Totally reccommended!â")
            fastAndEffective.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: 38))
            fastAndEffective.addAttribute(.font, value: UIFont(name: "Helvetica-Bold", size: 14)!, range: NSRange(location: 38, length: 12))
            fastAndEffective.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 50, length: 5))
            fastAndEffective.addAttribute(.font, value: UIFont(name: "Helvetica-Bold", size: 14)!, range: NSRange(location: 55, length: 5))
            fastAndEffective.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 60, length: 27))
            fastAndEffective.addAttribute(.font, value: UIFont(name: "Helvetica-Bold", size: 14)!, range: NSRange(location: 87, length: 12))
            fastAndEffective.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 99, length: 2))
            fastAndEffective.addAttribute(.font, value: UIFont(name: "Helvetica-Bold", size: 14)!, range: NSRange(location: 101, length: 9))
            fastAndEffective.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 110, length: 24))
            context.saveGState()
            fastAndEffective.draw(at: CGPoint(x: 88, y: 691))
            context.restoreGState()
            
            /// Line 2
            let line2 = UIBezierPath()
            line2.move(to: CGPoint.zero)
            line2.addLine(to: CGPoint(x: 417, y: 0))
            context.saveGState()
            context.translateBy(x: 0, y: 662)
            line2.lineCapStyle = .square
            line2.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line2.stroke()
            context.restoreGState()
            
            /// Line 2
            let line3 = UIBezierPath()
            line3.move(to: CGPoint.zero)
            line3.addLine(to: CGPoint(x: 417, y: 0))
            context.saveGState()
            context.translateBy(x: 0, y: 749)
            line3.lineCapStyle = .square
            line3.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line3.stroke()
            context.restoreGState()
            
            /// Rectangle
            let rectangle2 = UIBezierPath()
            rectangle2.move(to: CGPoint(x: 2, y: 0))
            rectangle2.addLine(to: CGPoint(x: 163, y: 0))
            rectangle2.addCurve(to: CGPoint(x: 165, y: 2), controlPoint1: CGPoint(x: 164.1, y: 0), controlPoint2: CGPoint(x: 165, y: 0.9))
            rectangle2.addLine(to: CGPoint(x: 165, y: 46))
            rectangle2.addCurve(to: CGPoint(x: 163, y: 48), controlPoint1: CGPoint(x: 165, y: 47.1), controlPoint2: CGPoint(x: 164.1, y: 48))
            rectangle2.addLine(to: CGPoint(x: 2, y: 48))
            rectangle2.addCurve(to: CGPoint(x: 0, y: 46), controlPoint1: CGPoint(x: 0.9, y: 48), controlPoint2: CGPoint(x: 0, y: 47.1))
            rectangle2.addLine(to: CGPoint(x: 0, y: 2))
            rectangle2.addCurve(to: CGPoint(x: 2, y: 0), controlPoint1: CGPoint(x: 0, y: 0.9), controlPoint2: CGPoint(x: 0.9, y: 0))
            rectangle2.close()
            context.saveGState()
            context.translateBy(x: 117, y: 855)
            rectangle2.usesEvenOddFillRule = true
            UIColor.white.setFill()
            rectangle2.fill()
            context.saveGState()
            rectangle2.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle2.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.592, alpha: 1).setStroke()
            rectangle2.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Read more
            let readMore = NSMutableAttributedString(string: "Read more")
            readMore.addAttribute(.font, value: UIFont(name: "Avenir-Light", size: 18)!, range: NSRange(location: 0, length: readMore.length))
            readMore.addAttribute(.kern, value: 0.6, range: NSRange(location: 0, length: readMore.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                readMore.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: readMore.length))
            }
            readMore.addAttribute(.foregroundColor, value: UIColor(hue: 0.532, saturation: 0.045, brightness: 0.026, alpha: 1), range: NSRange(location: 0, length: readMore.length))
            context.saveGState()
            readMore.draw(at: CGPoint(x: 153, y: 865))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawSecondScreen2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 850), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 850), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 850)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Bars/Navigation/Navigation Bar
        // Warning: New symbols are not supported.
        
        /// MP_RGB_NoTM_Logo+Type Horisontal Blue
        // Warning: Image layers are not supported.
        
        /// MP_RGB_NoTM_Logo+Type Horisontal Blue
        // Warning: Image layers are not supported.
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 78, y: 171)
            
            /// The_Body_Shop_logo
            // Warning: Image layers are not supported.
            
            /// Screen Shot 2018-11-24 at 16.11.18
            // Warning: Image layers are not supported.
            
            /// Kamppi Center Urho K
            let kamppiCenterUrhoK = NSMutableAttributedString(string: "Kamppi Center\nUrho Kekkosen katu 1\n0757532442\n\nOpen 24 hours\n")
            kamppiCenterUrhoK.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: kamppiCenterUrhoK.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                kamppiCenterUrhoK.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: kamppiCenterUrhoK.length))
            }
            context.saveGState()
            kamppiCenterUrhoK.draw(at: CGPoint(x: 61, y: 169))
            context.restoreGState()
            
            /// large@2x-3
            // Warning: Image layers are not supported.
            
            /// Rectangle
            let rectangle = UIBezierPath()
            rectangle.move(to: CGPoint.zero)
            rectangle.addLine(to: CGPoint(x: 134, y: 0))
            rectangle.addLine(to: CGPoint(x: 134, y: 35))
            rectangle.addLine(to: CGPoint(x: 0, y: 35))
            rectangle.addLine(to: CGPoint.zero)
            rectangle.close()
            context.saveGState()
            context.translateBy(x: 61, y: 543)
            rectangle.usesEvenOddFillRule = true
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setFill()
            rectangle.fill()
            context.saveGState()
            rectangle.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.clip(using: .evenOdd)
            UIColor(hue: 0.636, saturation: 0.646, brightness: 0.996, alpha: 1).setStroke()
            rectangle.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Open store profile
            let openStoreProfile = NSMutableAttributedString(string: "Open store profile")
            openStoreProfile.addAttribute(.font, value: UIFont(name: "Avenir-Light", size: 18)!, range: NSRange(location: 0, length: openStoreProfile.length))
            openStoreProfile.addAttribute(.kern, value: 0.6, range: NSRange(location: 0, length: openStoreProfile.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                openStoreProfile.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: openStoreProfile.length))
            }
            openStoreProfile.addAttribute(.foregroundColor, value: UIColor(hue: 0.532, saturation: 0.028, brightness: 0.97, alpha: 1), range: NSRange(location: 0, length: openStoreProfile.length))
            context.saveGState()
            openStoreProfile.draw(at: CGPoint(x: 50, y: 547))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawFirstScreen2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 736), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 736), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 736)
        
        /// Background Color
        UIColor.white.setFill()
        context.fill(context.boundingBoxOfClipPath)
        
        /// Bars/Navigation/Navigation Bar
        // Warning: New symbols are not supported.
        
        /// Rectangle
        let rectangle = UIBezierPath()
        rectangle.move(to: CGPoint.zero)
        rectangle.addLine(to: CGPoint(x: 63, y: 0))
        rectangle.addLine(to: CGPoint(x: 63, y: 31))
        rectangle.addLine(to: CGPoint(x: 0, y: 31))
        rectangle.addLine(to: CGPoint.zero)
        rectangle.close()
        context.saveGState()
        context.translateBy(x: 333, y: 25)
        rectangle.usesEvenOddFillRule = true
        UIColor(white: 0.976, alpha: 1).setFill()
        rectangle.fill()
        context.saveGState()
        rectangle.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.976, alpha: 1).setStroke()
        rectangle.stroke()
        context.restoreGState()
        context.restoreGState()
        
        /// Group
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 96)
            
            /// Line 2
            let line2 = UIBezierPath()
            line2.move(to: CGPoint.zero)
            line2.addLine(to: CGPoint(x: 414, y: 0))
            context.saveGState()
            context.translateBy(x: 0, y: 140)
            line2.lineCapStyle = .square
            line2.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line2.stroke()
            context.restoreGState()
            
            /// fafas-logo
            // Warning: Image layers are not supported.
            
            /// We have two new sugg
            let weHaveTwoNewSugg = NSMutableAttributedString(string: "We have two new suggestions based on your purchasing history at Habibi.")
            weHaveTwoNewSugg.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: weHaveTwoNewSugg.length))
            context.saveGState()
            weHaveTwoNewSugg.draw(in: CGRect(x: 135, y: 87, width: 255, height: 38))
            context.restoreGState()
            
            /// MP_RGB_NoTM_Logo+Type Horisontal Blue
            // Warning: Image layers are not supported.
            
            /// Line 2
            let line3 = UIBezierPath()
            line3.move(to: CGPoint.zero)
            line3.addLine(to: CGPoint(x: 414, y: 0))
            context.saveGState()
            context.translateBy(x: 0, y: 229)
            line3.lineCapStyle = .square
            line3.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line3.stroke()
            context.restoreGState()
            
            /// Line 2
            let line4 = UIBezierPath()
            line4.move(to: CGPoint.zero)
            line4.addLine(to: CGPoint(x: 414, y: 0))
            context.saveGState()
            context.translateBy(x: 0, y: 314)
            line4.lineCapStyle = .square
            line4.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line4.stroke()
            context.restoreGState()
            
            /// fafas-logo
            // Warning: Image layers are not supported.
            
            /// You like Falafel? Th
            let youLikeFalafelTh = NSMutableAttributedString(string: "You like Falafel? Then you should \ndefinitely check out Fafaâs at \nKalevalentie 3.")
            youLikeFalafelTh.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: youLikeFalafelTh.length))
            context.saveGState()
            youLikeFalafelTh.draw(in: CGRect(x: 135, y: 163, width: 267, height: 57))
            context.restoreGState()
            
            /// Interested in natura
            let interestedInNatura = NSMutableAttributedString(string: "Interested in natural cosmetics? We have one new shop suggestion for you.")
            interestedInNatura.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: interestedInNatura.length))
            context.saveGState()
            interestedInNatura.draw(in: CGRect(x: 135, y: 247, width: 267, height: 38))
            context.restoreGState()
            
            /// The_Body_Shop_logo
            // Warning: Image layers are not supported.
            
            /// Line 2
            let line5 = UIBezierPath()
            line5.move(to: CGPoint.zero)
            line5.addLine(to: CGPoint(x: 414, y: 0))
            context.saveGState()
            context.translateBy(x: 0, y: 402)
            line5.lineCapStyle = .square
            line5.lineWidth = 1
            UIColor(white: 0.592, alpha: 1).setStroke()
            line5.stroke()
            context.restoreGState()
            
            /// saunahermanni
            // Warning: Image layers are not supported.
            
            /// Based on your visit
            let basedOnYourVisit = NSMutableAttributedString(string: "Based on your visit to Kaurilan Sauna, we have one new shop suggestion\nfor you.")
            basedOnYourVisit.addAttribute(.font, value: UIFont(name: "Helvetica", size: 14)!, range: NSRange(location: 0, length: basedOnYourVisit.length))
            context.saveGState()
            basedOnYourVisit.draw(in: CGRect(x: 135, y: 333, width: 267, height: 57))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        /// MP_RGB_NoTM_Logo+Type Horisontal Blue
        // Warning: Image layers are not supported.
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Symbols
    
    class func imageOfBarsStatusBlack4() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 20), false, 0)
        StyleKit.drawBarsStatusBlack4()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusBlack3() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 20), false, 0)
        StyleKit.drawBarsStatusBlack3()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusBlack2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 20), false, 0)
        StyleKit.drawBarsStatusBlack2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfBarsStatusBlack() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 20), false, 0)
        StyleKit.drawBarsStatusBlack()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfOverridesStatusBarSignalBlack() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 140, height: 20), false, 0)
        StyleKit.drawOverridesStatusBarSignalBlack()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// Page 1
    
    class func imageOfSixthScreen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 414, height: 736), false, 0)
        StyleKit.drawSixthScreen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFifthScreen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 414, height: 1002), false, 0)
        StyleKit.drawFifthScreen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFourthScreen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 414, height: 832), false, 0)
        StyleKit.drawFourthScreen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfThirdScreen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 414, height: 832), false, 0)
        StyleKit.drawThirdScreen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSecondScreen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 414, height: 832), false, 0)
        StyleKit.drawSecondScreen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFirstScreen() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 414, height: 736), false, 0)
        StyleKit.drawFirstScreen()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    /// Page 2
    
    class func imageOfThirdScreen2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 414, height: 1159), false, 0)
        StyleKit.drawThirdScreen2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfSecondScreen2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 414, height: 850), false, 0)
        StyleKit.drawSecondScreen2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfFirstScreen2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 414, height: 736), false, 0)
        StyleKit.drawFirstScreen2()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
